(function(global,factory){typeof exports==="object"&&typeof module!=="undefined"?factory():typeof define==="function"&&define.amd?define(factory):factory()})(this,function(){"use strict";const potreeLoader=require("@pix4d/three-potree-loader");const PointCloudOctree=potreeLoader.PointCloudOctree;const Potree=potreeLoader.Potree;const PointColorType=potreeLoader.PointColorType;const PointShape=potreeLoader.PointShape;const PointSizeType=potreeLoader.PointSizeType;const TreeType=potreeLoader.TreeType;if(typeof AFRAME==="undefined"){throw new Error("Component attempted to register before AFRAME was available.")}AFRAME.registerSystem("potree",{schema:{},init:function(){},tick:function(time,delta){}});AFRAME.registerComponent("potree-loader",{schema:{src:{},pointSize:{type:"number",default:1},minimumNodePixelSize:{default:150,min:0,max:1e3,type:"number"},pointSizeType:{default:"adaptive",oneOf:Object.values(PointSizeType).filter(v=>!Number.isInteger(v)).map(v=>v.toLowerCase())},pointShape:{default:"square",oneOf:Object.values(PointShape).filter(v=>!Number.isInteger(v)).map(v=>v.toLowerCase())},pointColorType:{default:"rgb",oneOf:Object.values(PointColorType).filter(v=>!Number.isInteger(v)).map(v=>v.toLowerCase())},weighted:{default:false,type:"boolean"},pointBudget:{type:"number",default:3}},multiple:false,init:function(){const data=this.data;const el=this.el;const potree=new Potree;potree.pointBudget=data.pointBudget*1e6;const pointClouds=[];potree.loadPointCloud("cloud.js",url=>`${data.src}/${url}`).then(pco=>{pointClouds.push(pco);el.object3D.add(pco);this.pco=pco;this._updatePointCloud(data);el.emit("model-loaded",pco)}).catch(err=>{console.warn(err);el.emit("model-error",{src:`${data.src}`})});this.potree=potree;this.pointClouds=pointClouds},update:function(oldData){const data=this.data;if(AFRAME.utils.deepEqual(data,oldData))return;if(this.pco){this._updatePointCloud(data)}},_updatePointCloud:function(data){this.pco.material.size=data.pointSize;this.pco.material.pointColorType=PointColorType[data.pointColorType.toUpperCase()];this.pco.material.pointShapeType=PointShape[data.pointShape.toUpperCase()];this.pco.material.pointSizeType=PointSizeType[data.pointSizeType.toUpperCase()];console.log(this.pco.material.pointSizeType);this.pco.minimumNodePixelSize=data.minimumNodePixelSize},remove:function(){},tick:function(time,delta){const renderer=this.el.sceneEl.renderer;const camera=this.el.sceneEl.camera;this.potree.updatePointClouds(this.pointClouds,camera,renderer)}})});
